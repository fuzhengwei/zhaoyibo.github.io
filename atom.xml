<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ideas Sea</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://note.windrun.me/"/>
  <updated>2018-04-04T09:59:24.985Z</updated>
  <id>https://note.windrun.me/</id>
  
  <author>
    <name>Yibo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 OS X 中使用 jEnv 管理多个 Java 版本</title>
    <link href="https://note.windrun.me/2018/04/04/managing-multiple-versions-of-java-on-macos/"/>
    <id>https://note.windrun.me/2018/04/04/managing-multiple-versions-of-java-on-macos/</id>
    <published>2018-04-04T09:34:23.000Z</published>
    <updated>2018-04-04T09:59:24.985Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在使用 Java 开发时候，经常会接触到不同的版本。比如我大部分的时间使用的都是 Java 8，而有时又想看看 Java 7 的源代码，现在 Java 9、10 都出来了，又想试试新特性。一般情况下都是是配置 JAVA_HOME，以指定特定的Java 版本，但是这都需要手动输入。每次都要这么重新设置，实在是太痛苦了。终于，我发现了 &lt;a href=&quot;http://www.jenv.be/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jEnv - Manage your Java environment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;正如它的官网所宣称的那样，它是来让你忘记怎么配置 JAVA_HOME 环境变量的神队友。使用简单的命令就可以在不同的 Java 版本之间进行切换。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://note.windrun.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>再说 Spring AOP</title>
    <link href="https://note.windrun.me/2018/04/01/spring-aop-words-again/"/>
    <id>https://note.windrun.me/2018/04/01/spring-aop-words-again/</id>
    <published>2018-04-01T08:14:29.000Z</published>
    <updated>2018-04-01T16:58:39.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-AOP&quot;&gt;&lt;a href=&quot;#什么是-AOP&quot; class=&quot;headerlink&quot; title=&quot;什么是 AOP&quot;&gt;&lt;/a&gt;什么是 AOP&lt;/h2&gt;&lt;p&gt;AOP（Aspect-OrientedProgramming，面向方面编程），可以说是 OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP 引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP 则显得无能为力。也就是说，OOP 允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在 OOP 设计中，它导致了大量代码的重复，而不利于各个模块的重用。&lt;/p&gt;
&lt;p&gt;AOP 实现的关键在于 AOP 框架自动创建的 AOP 代理，AOP 代理主要分为静态代理和动态代理，静态代理的代表为 AspectJ；而动态代理则以 Spring AOP 为代表。静态代理是编译期实现，动态代理是运行期实现，可想而知前者拥有更好的性能。&lt;/p&gt;
&lt;p&gt;静态代理是编译阶段生成 AOP 代理类，也就是说生成的字节码就织入了增强后的 AOP 对象；动态代理则不会修改字节码，而是在内存中临时生成一个 AOP 对象，这个 AOP 对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。&lt;/p&gt;
&lt;p&gt;Spring AOP 中的动态代理主要有两种方式，JDK 动态代理和 CGLIB 动态代理。JDK 动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK 动态代理的核心是 InvocationHandler 接口和 Proxy 类。&lt;/p&gt;
&lt;p&gt;如果目标类没有实现接口，那么 Spring AOP 会选择使用 CGLIB 来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成某个类的子类，注意，CGLIB 是通过继承的方式做的动态代理，因此如果某个类被标记为 final，那么它是无法使用 CGLIB 做动态代理的，诸如 private 的方法也是不可以作为切面的。&lt;/p&gt;
&lt;p&gt;我们分别通过实例来研究 AOP 的具体实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://note.windrun.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java7/8 中的 HashMap 和 ConcurrentHashMap 全解析</title>
    <link href="https://note.windrun.me/2018/02/03/java7-8-hashmap-and-concurrenthashmap/"/>
    <id>https://note.windrun.me/2018/02/03/java7-8-hashmap-and-concurrenthashmap/</id>
    <published>2018-02-03T01:59:00.000Z</published>
    <updated>2018-03-20T02:57:57.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;今天发一篇”水文”，可能很多读者都会表示不理解，不过我想把它作为并发序列文章中不可缺少的一块来介绍。本来以为花不了多少时间的，不过最终还是投入了挺多时间来完成这篇文章的。&lt;/p&gt;
&lt;p&gt;网上关于 HashMap 和 ConcurrentHashMap 的文章确实不少，不过缺斤少两的文章比较多，所以才想自己也写一篇，把细节说清楚说透，尤其像 Java8 中的 ConcurrentHashMap，大部分文章都说不清楚。终归是希望能降低大家学习的成本，不希望大家到处找各种不是很靠谱的文章，看完一篇又一篇，可是还是模模糊糊。&lt;/p&gt;
&lt;p&gt;阅读建议：四节基本上可以进行独立阅读，建议初学者可按照 Java7 HashMap -&amp;gt; Java7 ConcurrentHashMap -&amp;gt; Java8 HashMap -&amp;gt; Java8 ConcurrentHashMap 顺序进行阅读，可适当降低阅读门槛。&lt;/p&gt;
&lt;p&gt;阅读前提：本文分析的是源码，所以至少读者要熟悉它们的接口使用，同时，对于并发，读者至少要知道 CAS、ReentrantLock、UNSAFE 操作这几个基本的知识，文中不会对这些知识进行介绍。Java8 用到了红黑树，不过本文不会进行展开，感兴趣的读者请自行查找相关资料。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://note.windrun.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Git 中的各种后悔药</title>
    <link href="https://note.windrun.me/2017/11/14/git-undo/"/>
    <id>https://note.windrun.me/2017/11/14/git-undo/</id>
    <published>2017-11-14T06:18:45.000Z</published>
    <updated>2018-04-01T08:28:21.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Git 强大的撤销、版本回退功能，让我们在开发的过程中能够随意的回到任何一个时间点的状态，本文我们就来看看 Git 中的各种后悔药!&lt;/p&gt;
&lt;p&gt;本文将从如下三个方面介绍 Git 中的后悔药：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;工作区的代码想撤销&lt;/li&gt;
&lt;li&gt;add 到暂存区的代码想撤销&lt;/li&gt;
&lt;li&gt;提交到本地仓库的代码想撤销&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://note.windrun.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>给图片加文字水印（纯前端实现）</title>
    <link href="https://note.windrun.me/2017/10/25/text-watermark/"/>
    <id>https://note.windrun.me/2017/10/25/text-watermark/</id>
    <published>2017-10-24T21:15:36.000Z</published>
    <updated>2017-10-24T21:40:32.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;由于之前我的身份信息曾被人盗用过，被用来开过银行卡（还好是储蓄卡且没有什么影响），我现在在网上进行实名认证的时候，都会给证件照片打上水印再上传。&lt;/p&gt;
&lt;p&gt;以前都是自己用 Photoshop 手动打水印，今天浏览微博的时候无意中看到@小众软件推了一个&lt;a href=&quot;http://www.appinn.com/id-watermark-online/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小工具&lt;/a&gt;，感觉这是一个办法。&lt;/p&gt;
&lt;p&gt;不过打开后发现要把图片上传到服务器，然后加了水印再传回来。这感觉怎么这么奇怪呢？为了保护隐私先把隐私传到网上？&lt;br&gt;虽然作者明确说“本网站不会对用户身份证照片进行存储，请放心使用”并且代码已经开源，不过我还是不太放心，就想着自己写一个自己玩吧。&lt;br&gt;第一反应是用 Go 给搞一个。后来一想，这点功能应该纯前端就能实现吧？&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用 shell 脚本自动创建/移除并挂载交换文件</title>
    <link href="https://note.windrun.me/2017/10/23/shell-script-for-swap/"/>
    <id>https://note.windrun.me/2017/10/23/shell-script-for-swap/</id>
    <published>2017-10-23T00:19:46.000Z</published>
    <updated>2018-04-01T08:20:52.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;今天我发现了一个 &lt;a href=&quot;https://programmaticponderings.com/2013/12/19/scripting-linux-swap-space/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gary Stafford&lt;/a&gt; 写的 shell 小脚本（两个 shell 脚本，一个用于创建交换文件，另外一个用于移除交换文件），它可以帮助我们在 Linux 中创建/移除并且自动挂载交换文件。&lt;/p&gt;
&lt;p&gt;默认这个脚本创建并挂载 512MB 的交换文件。如果你想要更多的交换空间和不同的文件名，你需要相应地修改脚本。修改脚本不是一件困难的事，因为这是一个容易上手而且很小的脚本。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://note.windrun.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Golang 错误处理</title>
    <link href="https://note.windrun.me/2017/07/30/golang-error-handle/"/>
    <id>https://note.windrun.me/2017/07/30/golang-error-handle/</id>
    <published>2017-07-30T07:49:25.000Z</published>
    <updated>2017-08-02T00:54:56.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Go 语言有很多优秀的特性，比如 Goroutine、非侵入性接口等等。但是大家对 Go 也有很多争议，其中争议最大的可能就是它的错误处理机制了，知乎上也有相关的讨论&lt;a href=&quot;https://www.zhihu.com/question/27158146&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;「Go 语言的错误处理机制是一个优秀的设计吗？」&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有人认为冗长重复的错误处理格式像是回到了上世纪七十年代，有人也提出这是 Go 语言非常出色的设计之一，那么到底是怎样的呢？&lt;br&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://note.windrun.me/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>MySQL高性能表设计规范</title>
    <link href="https://note.windrun.me/2017/07/28/high-performance-mysql-schema/"/>
    <id>https://note.windrun.me/2017/07/28/high-performance-mysql-schema/</id>
    <published>2017-07-27T20:04:45.000Z</published>
    <updated>2017-08-02T00:58:14.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;良好的逻辑设计和物理设计是高性能的基石，应该根据系统将要执行的查询语句来设计 schema，这往往需要权衡各种因素。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://note.windrun.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>崇礼50KM | 我的首野，我的新大陆</title>
    <link href="https://note.windrun.me/2017/07/22/trail-running-2017-columbia168-chongli/"/>
    <id>https://note.windrun.me/2017/07/22/trail-running-2017-columbia168-chongli/</id>
    <published>2017-07-21T18:32:40.000Z</published>
    <updated>2017-08-15T21:47:35.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1465080207318-3de7361f84e7?ixlib=rb-0.3.5&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=1080&amp;amp;fit=max&amp;amp;s=bf5e7f18ac380c916047a7adfdf3d286&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;人生就是如此，你以为已经从一个漩涡逃离，其实另外一个漩涡就在你的脚下。用力蹬一脚，就进去了。所以，不需要对生活太用力，心会带着我们去该去的地方。&lt;br&gt;——龙应台《目送》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;center&gt;&lt;br&gt;&lt;iframe frameborder=&quot;0&quot; width=&quot;640&quot; height=&quot;498&quot; src=&quot;https://v.qq.com/iframe/player.html?vid=u05260glk3d&amp;tiny=0&amp;auto=0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;&lt;/center&gt;

&lt;p&gt;上周末刚刚完成了我的人生第一场越野跑比赛。如今越野跑之于我，就像哥伦布发现了新大陆。&lt;br&gt;
    
    </summary>
    
    
      <category term="Running" scheme="https://note.windrun.me/tags/Running/"/>
    
  </entry>
  
  <entry>
    <title>R.I.P. Chester Bennington, 1976-2017</title>
    <link href="https://note.windrun.me/2017/07/21/rip-chester-bennington/"/>
    <id>https://note.windrun.me/2017/07/21/rip-chester-bennington/</id>
    <published>2017-07-21T05:45:00.000Z</published>
    <updated>2017-08-30T01:02:02.000Z</updated>
    
    <summary type="html">
    
      &lt;center&gt;&lt;br&gt;&lt;strong&gt;R.I.P&lt;/strong&gt;&lt;br&gt;&lt;iframe frameborder=&quot;0&quot; width=&quot;640&quot; height=&quot;498&quot; src=&quot;https://v.qq.com/iframe/player.html?vid=m052929dp4i&amp;tiny=0&amp;auto=0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ghost 1.0.0 调教指南</title>
    <link href="https://note.windrun.me/2017/07/20/improve-ghost/"/>
    <id>https://note.windrun.me/2017/07/20/improve-ghost/</id>
    <published>2017-07-19T22:16:48.000Z</published>
    <updated>2017-07-31T18:26:06.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://docs.ghost.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ghost 1.0.0&lt;/a&gt; 已经 RC1 了，我用着比之前的版本舒服多了。不过嘛，既然是候选版本，问题肯定还是有的（主要是新版 Casper 主题样式上的），结合我目前体验发现的一些 BUG 做个汇总。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ghost" scheme="https://note.windrun.me/tags/Ghost/"/>
    
      <category term="Blog" scheme="https://note.windrun.me/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Ghost vs Hexo</title>
    <link href="https://note.windrun.me/2017/07/19/ghost-vs-hexo/"/>
    <id>https://note.windrun.me/2017/07/19/ghost-vs-hexo/</id>
    <published>2017-07-19T08:06:43.000Z</published>
    <updated>2017-07-19T21:45:19.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近把博客从 Hexo 迁移到了 Ghost 上，简单聊一下用了两年的 Hexo 和只用了两天的 Ghost。&lt;/p&gt;
&lt;p&gt;我对博客系统的要求，只有一个：能用 Markdown 渲染。&lt;br&gt;其实能满足我要求的博客系统的还是蛮多，除了 Hexo 和 Ghost 这两个，还有比如 FarBox、Jekyll、Octopress 这些都是可以的，甚至还有直接注册个账号就能用的简书。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ghost" scheme="https://note.windrun.me/tags/Ghost/"/>
    
      <category term="Blog" scheme="https://note.windrun.me/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://note.windrun.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>HBase 1.2.6 完全分布式部署</title>
    <link href="https://note.windrun.me/2017/07/18/hbase-fully-distributed/"/>
    <id>https://note.windrun.me/2017/07/18/hbase-fully-distributed/</id>
    <published>2017-07-18T03:19:59.000Z</published>
    <updated>2017-08-03T22:40:45.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;测试环境中用三台 Linux 服务器来部署 HBase 与 Hadoop，详细信息如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;hostname&lt;/th&gt;
&lt;th&gt;ip&lt;/th&gt;
&lt;th&gt;role&lt;/th&gt;
&lt;th&gt;hadoop&lt;/th&gt;
&lt;th&gt;hbase&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;yibo-0&lt;/td&gt;
&lt;td&gt;10.10.5.215&lt;/td&gt;
&lt;td&gt;master&lt;/td&gt;
&lt;td&gt;ResourceManager/NameNode/SecondaryNameNode&lt;/td&gt;
&lt;td&gt;HMaster&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yibo-1&lt;/td&gt;
&lt;td&gt;10.10.5.207&lt;/td&gt;
&lt;td&gt;slave1&lt;/td&gt;
&lt;td&gt;NodeManager/DataNode&lt;/td&gt;
&lt;td&gt;HRegionServer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yibo-2&lt;/td&gt;
&lt;td&gt;10.10.5.217&lt;/td&gt;
&lt;td&gt;slave2&lt;/td&gt;
&lt;td&gt;NodeManager/DataNode&lt;/td&gt;
&lt;td&gt;HRegionServer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;对于HBase与Hadoop版本要选择相对应的（否则会出很多问题），具体对应版本可参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://hbase.apache.org/book.html#configuration&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://hbase.apache.org/book.html#configuration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本次集群对应版本为：&lt;a href=&quot;http://hadoop.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hadoop-2.7.3&lt;/a&gt; + &lt;a href=&quot;http://hbase.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HBase-1.2.6&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hadoop" scheme="https://note.windrun.me/tags/Hadoop/"/>
    
      <category term="HBase" scheme="https://note.windrun.me/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 实践过程中遇到的几个小问题</title>
    <link href="https://note.windrun.me/2017/02/22/elasticsearch-issue/"/>
    <id>https://note.windrun.me/2017/02/22/elasticsearch-issue/</id>
    <published>2017-02-21T23:23:00.000Z</published>
    <updated>2017-07-18T04:51:44.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;公司项目最近要增加一个搜索的模块，虽然之前已经在项目中广泛的使用了 Lucene，但是这次这个模块再直接使用 Lucene 的话还得担心以后的扩展问题，所以就决定尝试用 ElasticSearch 来解决。（为什么不用 Solr 呢？其实 Solr 和 ES 的差别不大，它俩的对比评测网上也是一搜一大把，我主要是之前使用过 ELK 技术栈，所以还是更倾向于 ES）&lt;/p&gt;
&lt;p&gt;这篇文章就简单的对我在使用 ES 的过程中遇到的问题做一个记录，权当做笔记吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ELK" scheme="https://note.windrun.me/tags/ELK/"/>
    
      <category term="ElasticSearch" scheme="https://note.windrun.me/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Spring原理初探——IoC、AOP</title>
    <link href="https://note.windrun.me/2016/08/11/spring-ioc-aop/"/>
    <id>https://note.windrun.me/2016/08/11/spring-ioc-aop/</id>
    <published>2016-08-11T00:23:00.000Z</published>
    <updated>2018-03-20T00:38:55.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;众所周知， 现在的Spring框架已经成为构建企业级Java应用事实上的标准了，众多的企业项目都构建在Spring项目及其子项目之上，特别是Java Web项目。&lt;/p&gt;
&lt;p&gt;Spring的两个核心概念是IoC（控制反转）和AOP（面向切面编程）。想了解Spring的工作原理，毫无疑问，首先要从这两个概念的Spring实现入手。但是Spring源码浩如烟海，里面掺杂了太多的实现细节，入门可谓极其困难。当我正苦于难以入门时，好友介绍了&lt;a href=&quot;https://github.com/code4craft/tiny-spring&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tiny-spring&lt;/a&gt;这个开源项目，这个项目用了不到千行的代码，就将Spring的IoC、AOP的核心流程实现完毕，真是居家旅行、吹逼面试之必备呀！&lt;/p&gt;
&lt;p&gt;废话少说，我们开始吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://note.windrun.me/tags/Java/"/>
    
      <category term="Spring" scheme="https://note.windrun.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JVM 监控以及内存分析</title>
    <link href="https://note.windrun.me/2016/08/01/jvm-monitoring/"/>
    <id>https://note.windrun.me/2016/08/01/jvm-monitoring/</id>
    <published>2016-07-31T23:21:00.000Z</published>
    <updated>2018-03-20T00:42:20.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Java 语言，开发者不能直接控制程序运行内存，对象的创建都是由类加载器一步步解析，执行与生成与内存区域中的；并且jvm有自己的垃圾回收器对内存区域管理、回收；但是我们已经可以通过一些工具来在程序运行时查看对应的jvm内存使用情况，帮助更好的分析与优化我们的代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://note.windrun.me/tags/Java/"/>
    
      <category term="JVM" scheme="https://note.windrun.me/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>hg flow</title>
    <link href="https://note.windrun.me/2016/06/02/hg-flow/"/>
    <id>https://note.windrun.me/2016/06/02/hg-flow/</id>
    <published>2016-06-01T23:18:00.000Z</published>
    <updated>2017-07-17T23:36:54.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://bitbucket.org/yujiewu/hgflow/overview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hg flow&lt;/a&gt;&lt;/strong&gt; 是一种开发模式，采用生产（Production）、发布（Release）、开发（Develop）完全分离的分支模型支撑多人团队的开发模式。hg flow 的开发模型借鉴自 &lt;a href=&quot;https://github.com/nvie/gitflow&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git flow&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;git flow 的流程图如下：（hg flow 的流程同理，只不过大家习惯的分支名略有不同而已）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/6e3b2269ly1fq0fasz90cj21fl1xgk1b&quot; alt=&quot;git-flow&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CVS" scheme="https://note.windrun.me/tags/CVS/"/>
    
  </entry>
  
  <entry>
    <title>同步一个 fork</title>
    <link href="https://note.windrun.me/2016/04/14/syncing-a-fork/"/>
    <id>https://note.windrun.me/2016/04/14/syncing-a-fork/</id>
    <published>2016-04-13T23:16:00.000Z</published>
    <updated>2017-07-18T05:52:26.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;平时都是用 Hg（Mercurial），Git 用得不是很熟练，老是遗忘，特此记录一下。&lt;br&gt;其实都是根据 GitHub 官方 help 整理的（&lt;a href=&quot;https://help.github.com/articles/syncing-a-fork/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Syncing a fork&lt;/a&gt;、&lt;a href=&quot;https://help.github.com/articles/configuring-a-remote-for-a-fork/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Configuring a remote for a fork&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/6e3b2269ly1fq0faycelij20xc0pn75m&quot; alt=&quot;clone&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CVS" scheme="https://note.windrun.me/tags/CVS/"/>
    
  </entry>
  
  <entry>
    <title>Java 中 Integer 的缓存策略</title>
    <link href="https://note.windrun.me/2016/04/14/java-interger-cache/"/>
    <id>https://note.windrun.me/2016/04/14/java-interger-cache/</id>
    <published>2016-04-13T23:13:00.000Z</published>
    <updated>2017-10-11T21:52:09.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;介绍 Java 中 Integer 缓存的相关知识前，我们先来看一段代码，猜猜输出结果，&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.codingon.java;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;JavaIntegerCache&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Integer integer1 = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Integer integer2 = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (integer1 == integer2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;integer1 == integer2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;integer1 != integer2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Integer integer3 = &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Integer integer4 = &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (integer3 == integer4) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;integer3 == integer4&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;integer3 != integer4&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://note.windrun.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>DigitalOcean 搭建 Shadowsocks 服务和优化方案</title>
    <link href="https://note.windrun.me/2016/02/23/shadowsocks-optimization/"/>
    <id>https://note.windrun.me/2016/02/23/shadowsocks-optimization/</id>
    <published>2016-02-22T23:08:00.000Z</published>
    <updated>2017-07-18T03:08:46.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前一直用着公司提供的梯子，过了个春节，公司的那个在日本的 VPS 跪了，虽然我有备用的 Lantern 可以勉强使用，不过这玩意也经常抽风，所以干脆自己买个 VPS 搭梯子吧。&lt;/p&gt;
&lt;p&gt;做梯子用的 VPS 大家一般就是在 DigitalOcean 和 Linode 之间选择，而 Linode 的日本节点也差不多被国人玩坏了，在比较了 Linode 和 DigitalOcean 之后，我选择用 DigitalOcean，注册送10美刀，可以先用俩月试试。&lt;/p&gt;
&lt;p&gt;p.s. 关于 Lantern 的一点小提示： 可以通过启动页右下角的设置按钮设置全局代理，也可以通过修改配置文件（&lt;code&gt;lantern-2.0.x.yaml&lt;/code&gt;，Windows 在 &lt;code&gt;C:\Users\UserName\AppData\Roaming\Lantern\&lt;/code&gt;，Mac OS X 在 &lt;code&gt;/Users/YOUR_USER_NAME/Library/Application Support/Lantern&lt;/code&gt;）来自定义规则。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
